{
  "name": "cannon",
  "version": "0.6.1",
  "description": "A lightweight 3D physics engine written in JavaScript.",
  "homepage": "https://github.com/schteppe/cannon.js",
  "author": {
    "name": "Stefan Hedman",
    "email": "schteppe@gmail.com",
    "url": "http://steffe.se"
  },
  "keywords": [
    "cannon.js",
    "cannon",
    "physics",
    "engine",
    "3d"
  ],
  "main": "./build/cannon.js",
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/schteppe/cannon.js.git"
  },
  "bugs": {
    "url": "https://github.com/schteppe/cannon.js/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "devDependencies": {
    "jshint": "latest",
    "uglify-js": "latest",
    "nodeunit": "^0.9.0",
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-uglify": "^0.5.1",
    "grunt-browserify": "^2.1.4",
    "grunt-contrib-yuidoc": "^0.5.2",
    "browserify": "*"
  },
  "dependencies": {},
  "readme": "# cannon.js\n\n### Lightweight 3D physics for the web\nInspired by [three.js](https://github.com/mrdoob/three.js) and [ammo.js](https://github.com/kripken/ammo.js), and driven by the fact that the web lacks a physics engine, here comes cannon.js.\nThe rigid body physics engine includes simple collision detection, various body shapes, contacts, friction and constraints.\n\n[Demos](http://schteppe.github.com/cannon.js) - [Documentation](http://schteppe.github.com/cannon.js/docs) - [Rendering hints](https://github.com/schteppe/cannon.js/tree/master/examples) - [NPM package](https://npmjs.org/package/cannon)\n\n### Usage\nOptionally, start by building the library using [Grunt](http://gruntjs.com/).\n\nInclude [build/cannon.js](build/cannon.js) in your html:\n\n```html\n<script src=\"cannon.js\"></script>\n```\n\nThen you can start experimenting.\n\nThe sample code below creates a sphere on a plane, steps the simulation, and prints the sphere simulation to the console. Note that Cannon.js uses [SI units](http://en.wikipedia.org/wiki/International_System_of_Units) (metre, kilogram, second, etc.).\n\n```javascript\n// Setup our world\nvar world = new CANNON.World();\nworld.gravity.set(0,0,-9.82); // m/sÂ²\nworld.broadphase = new CANNON.NaiveBroadphase();\n\n// Create a sphere\nvar radius = 1; // m\nvar sphereBody = new CANNON.Body({\n   mass: 5 // kg\n});\nvar sphereShape = new CANNON.Sphere(radius);\nsphereBody.addShape(sphereShape);\nsphereBody.position.set(0,0,10); // m\nworld.add(sphereBody);\n\n// Create a plane\nvar groundBody = new CANNON.Body({\n    mass: 0 // mass == 0 makes the body static\n});\nvar groundShape = new CANNON.Plane();\ngroundBody.addShape(groundShape);\nworld.add(groundBody);\n\n// Step the simulation\nsetInterval(function(){\n  var timeStep = 1.0/60.0; // seconds\n  world.step(timeStep);\n  console.log(\"Sphere z position: \" + sphereBody.position.z);\n}, 1000.0/60.0);\n```\n\nIf you want to know how to use cannon.js with a rendering engine, for example Three.js, see the [Examples](examples).\n\n### Features\n* Rigid body physics\n* Collision detection (no CCD)\n* Contacts with friction and restitution\n* Constraints\n   * PointToPoint (also called balljoint)\n   * Distance\n   * Hinge (with optional motor)\n* Gauss-Seidel constraint solver and an island split algorithm\n* Collision filters\n* Body motion states (dynamic, kinematic, static)\n* Body sleeping\n* Experimental SPH / fluid support\n* Various shapes and collisions (see table below)\n\n|             | Sphere | Plane | Box | Convex | Particle | Heightfield |\n| :-----------|:------:|:-----:|:---:|:------:|:--------:|:-----------:|\n| Sphere      | Yes    | Yes   | Yes | Yes    | Yes      | Yes         |\n| Plane       | -      | -     | Yes | Yes    | Yes      | -           |\n| Box         | -      | -     | Yes | Yes    | Yes      | Yes         |\n| Cylinder    | -      | -     | Yes | Yes    | Yes      | Yes         |\n| Convex      | -      | -     | -   | Yes    | Yes      | Yes         |\n| Particle    | -      | -     | -   | -      | -        | (todo)      |\n| Heightfield | -      | -     | -   | -      | -        | -           |\n\n### Todo\nThe simpler todos are marked with ```@todo``` in the code. Github Issues can and should also be used for todos.\n\n### Help\nCreate an issue on here if you need help.\n",
  "readmeFilename": "README.markdown",
  "_id": "cannon@0.6.1",
  "_shasum": "93b3d0dc63e913ec80d69512b2860486cefb5cde",
  "_from": "cannon@~0.6.1",
  "_resolved": "https://registry.npmjs.org/cannon/-/cannon-0.6.1.tgz"
}
